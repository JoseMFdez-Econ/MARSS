tag=strsplit(tag,"[.]")[[1]][1]
tag
testNew
names(testNew)
names(testOld)
names(testNew$dlm1)
names(testNew$dlm1$control)
unittestfiles
unittestfile=unittestfiles[12]
#Get the file name
tag=strsplit(unittestfile,"/")[[1]]
tag=tag[length(tag)]
tag=strsplit(tag,"[.]")[[1]][1]
#Load in the 2 lists, testNew and testOld
vrs=packageVersion("MARSS", lib.loc = Sys.getenv("R_LIBS_USER"))
load(file=paste(tag,vrs,".Rdata",sep=""))
lib.loc = paste(Sys.getenv("R_HOME"),"/library",sep="")
vrs=packageVersion("MARSS", lib.loc = lib.loc)
load(file=paste(tag,vrs,".Rdata",sep=""))
names(testNew)
names(testOld)
unittestfile
ls()[!(ls()%in%c("unittestfile","unittestfiles","unittestvrs"))]
funs
?MARSS
#Other version of MARSS is in the R library (no local library)
lib.loc = paste(Sys.getenv("R_HOME"),"/library",sep="")
unittestvrs=packageVersion("MARSS", lib.loc = lib.loc)
unittestvrs
library(MARSS, lib.loc = lib.loc)
cat("\n\nRunning code with MARSS version", as.character(unittestvrs), "\n")
for(unittestfile in unittestfiles){
rm(list = ls()[!(ls()%in%c("unittestfile","unittestfiles","unittestvrs"))])
tag=strsplit(unittestfile,"/")[[1]]
tag=tag[length(tag)]
tag=strsplit(tag,"[.]")[[1]][1]
cat("Running ",unittestfile, "\n")
sink(paste("outputOld-",tag,".txt",sep=""))
set.seed(10)
try(source(unittestfile))
sink()
funs=sapply(ls(),function(x){isTRUE(class(get(x))=="function")})
ls.not.funs = ls()[ls()!="funs"]
test.these = ls.not.funs[!(ls.not.funs%in%c("unittestfile","unittestfiles","unittestvrs")) & !funs]
testOld = mget(test.these)
save(testOld,file=paste(tag,unittestvrs,".Rdata",sep=""))
}
load("~/GitHub/MARSS/vignettes/manual_files/CS4--model.fits.Rdata")
model.data$delta.AICc = model.data$AICc - min(model.data$AICc)
# calculate Akaike weights
wt = exp(-0.5*model.data$delta.AICc)
model.data$Ak.wt = wt/sum(wt)
# sort results
model.tbl = model.data[order(model.data$AICc),-4]
# drop AICc from table
# calculate cumulative wts
model.tbl$Ak.wt.cum = cumsum(model.tbl$Ak.wt)
model.tbl = model.tbl[,-4]
model.tbl
sink()
model.tbl
library("MARSS", lib.loc="~/R/win-library/3.4")
data(lakeWAplankton)
# we want lakeWAplanktonTrans, which has been log-transformed
# and the 0s replaced with NAs
plankdat = lakeWAplanktonTrans
years = plankdat[,"Year"]>=1980 & plankdat[,"Year"]<1990
phytos = c("Cryptomonas", "Diatoms", "Greens",
"Unicells", "Other.algae")
dat.spp.1980 = plankdat[years,phytos]
# transpose data so time goes across columns
dat.spp.1980 = t(dat.spp.1980)
N.ts = nrow(dat.spp.1980)
TT = ncol(dat.spp.1980)
Sigma = sqrt(apply(dat.spp.1980, 1, var, na.rm=TRUE))
y.bar = apply(dat.spp.1980, 1, mean, na.rm=TRUE)
dat.z = (dat.spp.1980 - y.bar) * (1/Sigma)
rownames(dat.z) = rownames(dat.spp.1980)
dat.z = zscore(dat.spp.1980)
detach("package:MARSS", unload=TRUE)
library("MARSS", lib.loc="~/R/win-library/3.4")
detach("package:MARSS", unload=TRUE)
library("MARSS", lib.loc="~/R/win-library/3.4")
zscore
dat.z = zscore(dat.spp.1980)
spp = rownames(dat.spp.1980)
par(mfcol=c(3,2), mar=c(3,4,1.5,0.5), oma=c(0.4,1,1,1))
for(i in spp){
plot(dat.z[i,],xlab="",ylab="Abundance index", bty="L", xaxt="n", pch=16, col="blue", type="b")
axis(1,12*(0:dim(dat.spp.1980)[2])+1,1980+0:dim(dat.spp.1980)[2])
title(i)
}
Z.vals = list(
"z11",  0  ,  0  ,
"z21","z22",  0  ,
"z31","z32","z33",
"z41","z42","z43",
"z51","z52","z53")
Z = matrix(Z.vals, nrow=N.ts, ncol=3, byrow=TRUE)
print(Z)
Q = B = diag(1,3)
R.vals = list(
"r11",0,0,0,0,
0,"r22",0,0,0,
0,0,"r33",0,0,
0,0,0,"r44",0,
0,0,0,0,"r55")
R = matrix(R.vals, nrow=N.ts, ncol=N.ts, byrow=TRUE)
print(R)
R = "diagonal and unequal"
x0 = U = matrix(0, nrow=3, ncol=1)
A = matrix(0, nrow=6, ncol=1)
x0 = U = A = "zero"
V0 = diag(5,3)
dfa.model = list(Z=Z, A="zero", R=R, B=B, U=U, Q=Q, x0=x0, V0=V0)
cntl.list = list(maxit=50)
kemz.3 = MARSS(dat.z, model=dfa.model, control=cntl.list)
# This is being done to speed up building the user guide
file="CS4--model.fits.Rdata"
if(file %in% dir("./manual_files")) {
load(paste("./manual_files/",file,sep=""))
saved.res = TRUE
} else { saved.res = FALSE }
if(!saved.res) {
big.maxit.cntl.list = list(minit=200, maxit=5000, allow.degen=FALSE)
kemz.3 = MARSS(dat.z, model=dfa.model, control=big.maxit.cntl.list)
}
temp = t(plankdat[,"Temp",drop=FALSE])
TP = t(plankdat[,"TP",drop=FALSE])
model.list=list(m=2, R="unconstrained")
kemz.temp = MARSS(dat.spp.1980, model=model.list, z.score=TRUE,
form="dfa", control=cntl.list, covariates=temp)
kemz.TP = MARSS(dat.spp.1980, model=model.list, z.score=TRUE,
form="dfa", control=cntl.list, covariates=TP)
kemz.both = MARSS(dat.spp.1980, model=model.list, z.score=TRUE,
form="dfa", control=cntl.list, covariates=rbind(temp,TP))
temp = t(plankdat[years,"Temp",drop=FALSE])
TP = t(plankdat[years,"TP",drop=FALSE])
model.list=list(m=2, R="unconstrained")
kemz.temp = MARSS(dat.spp.1980, model=model.list, z.score=TRUE,
form="dfa", control=cntl.list, covariates=temp)
kemz.TP = MARSS(dat.spp.1980, model=model.list, z.score=TRUE,
form="dfa", control=cntl.list, covariates=TP)
kemz.both = MARSS(dat.spp.1980, model=model.list, z.score=TRUE,
form="dfa", control=cntl.list, covariates=rbind(temp,TP))
ls()
rm(list=ls())
remove.packages("MARSS", lib="~/R/win-library/3.4")
install.packages("~/GitHub/MARSS_3.10.3.tar.gz", repos = NULL, type = "source")
source('~/GitHub/MARSS/inst/doc/versiontest.R')
for(unittestfile in unittestfiles){
rm(list = ls()[!(ls()%in%c("unittestfile","unittestfiles","unittestvrs","zscore.fun"))])
tag=strsplit(unittestfile,"/")[[1]]
tag=tag[length(tag)]
tag=strsplit(tag,"[.]")[[1]][1]
if(!exists("zscore")){zscore=zscore.fun}
cat("Running ",unittestfile, "\n")
sink(paste("outputOld-",tag,".txt",sep=""))
set.seed(10)
try(source(unittestfile))
sink()
funs=sapply(ls(),function(x){isTRUE(class(get(x))=="function")})
ls.not.funs = ls()[ls()!="funs"]
test.these = ls.not.funs[!(ls.not.funs%in%c("unittestfile","unittestfiles","unittestvrs")) & !funs]
testOld = mget(test.these)
save(testOld,file=paste(tag,unittestvrs,".Rdata",sep=""))
}
detach("package:MARSS", unload=TRUE)
#Now start comparing the lists made using different versions of MARSS
cat("\n\nStarting object comparisons\n")
for(unittestfile in unittestfiles){
#Get the file name
tag=strsplit(unittestfile,"/")[[1]]
tag=tag[length(tag)]
tag=strsplit(tag,"[.]")[[1]][1]
#Load in the 2 lists, testNew and testOld
vrs=packageVersion("MARSS", lib.loc = Sys.getenv("R_LIBS_USER"))
load(file=paste(tag,vrs,".Rdata",sep=""))
lib.loc = paste(Sys.getenv("R_HOME"),"/library",sep="")
vrs=packageVersion("MARSS", lib.loc = lib.loc)
load(file=paste(tag,vrs,".Rdata",sep=""))
#Compare the lists and report any differences
cat("Checking ", tag, "\n")
if(!identical(names(testNew), names(testOld))){
cat("ERROR: Names of the test lists not identical\n\n")
next
}
good=rep(TRUE,length(names(testNew)))
for(ii in 1:length(names(testNew))){
if(!identical(testNew[[ii]], testOld[[ii]])) good[ii] = FALSE
}
if(!all(good)){
cat("ERROR: The following objects are not identical\n")
cat(names(testNew)[!good])
cat("\n\n")
}else{
cat("PASSED\n\n")
}
}
lib.loc = Sys.getenv("R_LIBS_USER")
unittestvrs=packageVersion("MARSS", lib.loc = lib.loc)
unittestvrs #this should be new version
library(MARSS, lib.loc = lib.loc)
zscore.fun = zscore #3.9 does not have this
detach("package:MARSS", unload=TRUE)
lib.loc = paste(Sys.getenv("R_HOME"),"/library",sep="")
unittestvrs=packageVersion("MARSS", lib.loc = lib.loc)
unittestvrs
library(MARSS, lib.loc = lib.loc)
cat("\n\nRunning code with MARSS version", as.character(unittestvrs), "\n")
for(unittestfile in unittestfiles){
rm(list = ls()[!(ls()%in%c("unittestfile","unittestfiles","unittestvrs","zscore.fun"))])
tag=strsplit(unittestfile,"/")[[1]]
tag=tag[length(tag)]
tag=strsplit(tag,"[.]")[[1]][1]
if(!exists("zscore")){zscore=zscore.fun}
cat("Running ",unittestfile, "\n")
sink(paste("outputOld-",tag,".txt",sep=""))
set.seed(10)
try(source(unittestfile))
sink()
funs=sapply(ls(),function(x){isTRUE(class(get(x))=="function")})
ls.not.funs = ls()[ls()!="funs"]
test.these = ls.not.funs[!(ls.not.funs%in%c("unittestfile","unittestfiles","unittestvrs")) & !funs]
testOld = mget(test.these)
save(testOld,file=paste(tag,unittestvrs,".Rdata",sep=""))
}
detach("package:MARSS", unload=TRUE)
cat("\n\nStarting object comparisons\n")
for(unittestfile in unittestfiles){
#Get the file name
tag=strsplit(unittestfile,"/")[[1]]
tag=tag[length(tag)]
tag=strsplit(tag,"[.]")[[1]][1]
#Load in the 2 lists, testNew and testOld
vrs=packageVersion("MARSS", lib.loc = Sys.getenv("R_LIBS_USER"))
load(file=paste(tag,vrs,".Rdata",sep=""))
lib.loc = paste(Sys.getenv("R_HOME"),"/library",sep="")
vrs=packageVersion("MARSS", lib.loc = lib.loc)
load(file=paste(tag,vrs,".Rdata",sep=""))
#Compare the lists and report any differences
cat("Checking ", tag, "\n")
if(!identical(names(testNew), names(testOld))){
cat("ERROR: Names of the test lists not identical\n\n")
next
}
good=rep(TRUE,length(names(testNew)))
for(ii in 1:length(names(testNew))){
if(!identical(testNew[[ii]], testOld[[ii]])) good[ii] = FALSE
}
if(!all(good)){
cat("ERROR: The following objects are not identical\n")
cat(names(testNew)[!good])
cat("\n\n")
}else{
cat("PASSED\n\n")
}
}
unittestfile=unittestfiles[1]
tag=strsplit(unittestfile,"/")[[1]]
tag=tag[length(tag)]
tag=strsplit(tag,"[.]")[[1]][1]
#Load in the 2 lists, testNew and testOld
vrs=packageVersion("MARSS", lib.loc = Sys.getenv("R_LIBS_USER"))
load(file=paste(tag,vrs,".Rdata",sep=""))
lib.loc = paste(Sys.getenv("R_HOME"),"/library",sep="")
vrs=packageVersion("MARSS", lib.loc = lib.loc)
load(file=paste(tag,vrs,".Rdata",sep=""))
good=rep(TRUE,length(names(testNew)))
good
for(ii in 1:length(names(testNew))){
if(!identical(testNew[[ii]], testOld[[ii]])) good[ii] = FALSE
}
!good
testNew[[!good]][1]
testNew[[!good]]
which(!good)
testNew[[6]]
names(testNew[[6]])
names(testOld[[6]])
good=rep(TRUE,length(names(testNew)))
for(ii in 1:length(names(testNew))){
if(!identical(testNew[[ii]], testOld[[ii]])){
good[ii] = FALSE
if(is.list(testNew[[ii]])){
for(iii in 1:length(names(testNew[[ii]]))){
if(!identical(testNew[[ii]][[iii]], testOld[[ii]][[iii]]))
cat(names(testNew)[ii],names(testNew[[ii]])[iii],"not identical\n")
}
}
}
}
names(testNew)
names(testOld)
testNew$kem$marss
testNew$kem$par
testOld$kem$par
good=rep(TRUE,length(names(testNew)))
for(ii in 1:length(names(testNew))){
if(!identical(testNew[[ii]], testOld[[ii]])){
good[ii] = FALSE
if(is.list(testNew[[ii]])){
for(iii in 1:length(names(testNew[[ii]]))){
if(is.list(testNew[[ii]][[iii]])){
for(iv in 1:length(names(testNew[[ii]][[iii]]))){
if(!identical(testNew[[ii]][[iii]][iv], testOld[[ii]][[iii]][iv]))
cat(names(testNew)[ii],names(testNew[[ii]])[iii],names(testNew[[ii]][[iii]])[iv],"not identical\n")
}
}
}
}
}
}
good=rep(TRUE,length(names(testNew)))
for(ii in 1:length(names(testNew))){
if(!identical(testNew[[ii]], testOld[[ii]])){
good[ii] = FALSE
if(class(testNew[[ii]])=="marssMLE"){
for(iii in names(testNew[[ii]][["par"]])){
if(iii %in% c("G","H","L")) next
if(!identical(testNew[[ii]][["par"]][iii], testOld[[ii]][["par"]][iii]))
cat(names(testNew)[ii],"par",iii,"not identical\n")
}
}
}
}
cat("\n\nStarting object comparisons\n")
for(unittestfile in unittestfiles){
#Get the file name
tag=strsplit(unittestfile,"/")[[1]]
tag=tag[length(tag)]
tag=strsplit(tag,"[.]")[[1]][1]
#Load in the 2 lists, testNew and testOld
vrs=packageVersion("MARSS", lib.loc = Sys.getenv("R_LIBS_USER"))
load(file=paste(tag,vrs,".Rdata",sep=""))
lib.loc = paste(Sys.getenv("R_HOME"),"/library",sep="")
vrs=packageVersion("MARSS", lib.loc = lib.loc)
load(file=paste(tag,vrs,".Rdata",sep=""))
#Compare the lists and report any differences
cat("Checking ", tag, "\n")
if(!identical(names(testNew), names(testOld))){
cat("ERROR: Names of the test lists not identical\n\n")
next
}
good=rep(TRUE,length(names(testNew)))
for(ii in 1:length(names(testNew))){
if(!identical(testNew[[ii]], testOld[[ii]])){
good[ii] = FALSE
if(class(testNew[[ii]])=="marssMLE"){
for(iii in names(testNew[[ii]][["par"]])){
if(iii %in% c("G","H","L")) next
if(!identical(testNew[[ii]][["par"]][iii], testOld[[ii]][["par"]][iii]))
cat(names(testNew)[ii],"par",iii,"not identical\n")
}
}
}
}
if(!all(good)){
cat("ERROR: The following objects are not identical\n")
cat(names(testNew)[!good])
cat("\n\n")
}else{
cat("PASSED\n\n")
}
}
unittestfiles
unittestfile=unittestfiles[6]
unittestfile
unittestfile=unittestfiles[7]
unittestfile
tag=strsplit(unittestfile,"/")[[1]]
tag=tag[length(tag)]
tag=strsplit(tag,"[.]")[[1]][1]
#Load in the 2 lists, testNew and testOld
vrs=packageVersion("MARSS", lib.loc = Sys.getenv("R_LIBS_USER"))
load(file=paste(tag,vrs,".Rdata",sep=""))
lib.loc = paste(Sys.getenv("R_HOME"),"/library",sep="")
vrs=packageVersion("MARSS", lib.loc = lib.loc)
load(file=paste(tag,vrs,".Rdata",sep=""))
testNew$mod3.bfgs$par$A
testOld$mod3.bfgs$par$A
testOld$mod3.bfgs$par$R
testNew$mod3.bfgs$par$R
testNew$mod3.bfgs$control
names(testNew$mod3.bfgs)
names(testOld$mod3.bfgs)
testOld$mod3.bfgs$control
for(unittestfile in unittestfiles){
#Get the file name
tag=strsplit(unittestfile,"/")[[1]]
tag=tag[length(tag)]
tag=strsplit(tag,"[.]")[[1]][1]
#Load in the 2 lists, testNew and testOld
vrs=packageVersion("MARSS", lib.loc = Sys.getenv("R_LIBS_USER"))
load(file=paste(tag,vrs,".Rdata",sep=""))
lib.loc = paste(Sys.getenv("R_HOME"),"/library",sep="")
vrs=packageVersion("MARSS", lib.loc = lib.loc)
load(file=paste(tag,vrs,".Rdata",sep=""))
#Compare the lists and report any differences
cat("Checking ", tag, "\n")
if(!identical(names(testNew), names(testOld))){
cat("ERROR: Names of the test lists not identical\n\n")
next
}
good=rep(TRUE,length(names(testNew)))
for(ii in 1:length(names(testNew))){
if(!identical(testNew[[ii]], testOld[[ii]])){
good[ii] = FALSE
if(class(testNew[[ii]])=="marssMLE"){
for(iii in names(testNew[[ii]][["par"]])){
if(iii %in% c("G","H","L")) next
if(!identical(testNew[[ii]][["par"]][iii], testOld[[ii]][["par"]][iii])){
cat("Warning:", names(testNew)[ii],"par",iii,"not identical\n")
}else{
cat(names(testNew)[ii],"par",iii,"identical\n")
}
}
}
}
}
if(!all(good)){
cat("ERROR: The following objects are not identical\n")
cat(names(testNew)[!good])
cat("\n\n")
}else{
cat("PASSED\n\n")
}
}
?requireNamespace
?countourLines
?contourLines
?latexTranslate
?sys
library("MARSS", lib.loc="~/R/win-library/3.4")
dat = t(harborSeal)
dat = dat[c(2,11),]
MLEobj = MARSS(dat)
#state residuals
state.resids1=residuals(MLEobj)$state.residuals
#this is the same as
states=MLEobj$states
Q=coef(MLEobj,type="matrix")$Q
state.resids2=states[,2:30]-states[,1:29]-matrix(coef(MLEobj,type="matrix")$U,2,29)
#standardize to variance of 1
state.resids2=solve(t(chol(Q)))%*%state.resids2
#compare the two
cbind(t(state.resids1[,-30]),t(state.resids2))
#standardized (by variance) model & state residuals
residuals(MLEobj)$std.residuals
dat = t(harborSeal)
dat = dat[c(2,11),]
MLEobj = MARSS(dat)
state.resids1=residuals(MLEobj)$state.residuals
#this is the same as
states=MLEobj$states
Q=coef(MLEobj,type="matrix")$Q
state.resids2=states[,2:30]-states[,1:29]-matrix(coef(MLEobj,type="matrix")$U,2,29)
dim(state.resids1)
dim(state.resids2)
dim(state.resids1[,-30])
state.resids2=solve(t(chol(Q))) %*% state.resids2
dim(state.resids2)
?re_call
??re_call
str_detect
library(stringr)
str_detect
stringr::str_detect
detach("package:stringr", unload=TRUE)
?str_detect
library(stringr)
str_detect
?grepl
library(MARSS)
str_detect
detach("package:stringr", unload=TRUE)
str_detect
MARSS::str_detect
MARSS:::str_detect
MARSS:::str_detect("abc", "a")
grepl("abc", "a")
grepl("a","abc")
call("grepl","abc", "a")
Recall("grepl","abc", "a")
str_detect=function(string, pattern){
if (length(pattern) == 1) {
results <- Recall("grepl", string, pattern)
}
else {
results <- unlist(Remapply("grepl", string, pattern))
}
is.na(results) <- is.na(string)
results
}
str_detect("abc", "a")
str_detect
is.na(1:10)
is.na(c(1,NA,2))
is.na(c(1,NA,2))<-is.na(c("a",NA,"b"))
is.na(c(1,NA,2))<-is.na(NA)
?str_detect
libary(stringr)
library(stringr)
?str_detect
?grepl
?Recall
?mapply
mapply("grepl","abc",c("a","b"))
mapply("grepl",c("a","b"),"abc")
mapply("grepl",c("a","b"),"abc")
unlist(mapply("grepl",c("a","b"),"abc"))
?gsub
